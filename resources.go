// Code generated by go-bindata.
// sources:
// resources/template.html
// DO NOT EDIT!

package quotify

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5d\x73\xda\x38\x14\x7d\xe7\x57\x9c\xf5\x43\xb1\x07\xb0\x49\x93\xa6\x29\xd8\xec\x24\x69\xbb\xcd\x6e\xd2\xaf\x64\xfb\x95\xc9\x83\xb0\xaf\x6d\x6d\x6c\x89\x4a\x72\x80\xb6\xf9\xef\x3b\xb2\x4d\x80\x0e\xb3\xbb\x0f\x3b\xc0\x58\xba\xf7\xdc\xa3\x6b\xdd\xa3\x2b\xc2\x5f\x9e\xbf\x39\xbd\xfa\xfc\xf6\x05\x72\x53\x16\x93\x4e\xd8\x3c\x3a\x61\x4e\x2c\x99\x74\x80\xb0\x24\xc3\x90\x1b\x33\x1b\xd0\xd7\x8a\xdf\x45\xce\xa9\x14\x86\x84\x19\x5c\x2d\x67\xe4\x20\x6e\x66\x91\x63\x68\x61\x02\x1b\x3d\x46\x9c\x33\xa5\xc9\x44\x95\x49\x07\x47\x4e\x50\xd3\x14\x5c\xdc\x22\x57\x94\x46\x8e\x25\xd3\xa3\x20\x48\xa5\x30\xda\xcf\xa4\xcc\x0a\x62\x33\xae\xfd\x58\x96\x41\xac\xf5\xaf\x29\x2b\x79\xb1\x8c\x2e\xac\x9f\x94\x62\xc6\x81\xa2\x22\x72\xb4\x59\x16\xa4\x73\x22\xe3\xd4\x9c\xf5\xdc\x8e\x80\xa9\x4c\x96\xf8\x5e\x0f\x01\x4b\x3c\xd0\xfc\x1b\x8d\x70\x30\x9c\x2d\xc6\xad\x39\x96\x85\x54\x23\xcc\x73\x6e\x68\x65\x9b\xb2\xf8\x36\x53\xb2\x12\xc9\x40\xd1\x8c\x98\x19\x41\xc8\x76\xb8\x03\x33\x93\x9a\x1b\x2e\xc5\x08\x31\x09\x43\x6a\x07\xa4\x59\x37\x96\x77\x3b\xbd\xcc\x18\x16\xe7\x25\x09\x33\x42\xca\x17\x94\xac\x30\x76\xfb\x06\x3a\x67\x89\x9c\x8f\x30\xb4\x1f\x7f\x8f\x4a\xa8\x6c\xca\xdc\x61\x1f\xed\xd7\xdf\xdf\xf7\xfa\x6d\x44\x03\x7a\xbc\x03\xb4\xf7\x13\xe6\xe0\xbf\x10\x1d\xed\x00\x3d\xd9\xc2\xec\xca\xe7\xe9\x36\x64\x57\x36\x3f\x41\x76\x25\xf3\xf4\x89\xd7\xec\xc3\xbd\x2d\x6b\xd0\xd6\x35\x0c\x1a\x11\x76\x42\x5b\xdd\x49\x27\x4c\xf8\x1d\x6a\x5f\xe4\xcc\x79\x62\xf2\xd1\xd1\xd0\x96\x17\x25\x53\x19\x17\xa3\x21\x58\x65\xe4\xd8\x01\x4f\x22\x67\x56\xb0\x98\x1a\x99\xe4\x7b\x8d\x46\x36\xe3\x6b\x89\x34\x3a\x1b\x75\xd7\x42\xeb\xf6\xa1\x99\xd0\x03\x4d\x8a\xa7\x2d\x53\x9c\x33\x91\xd1\xbb\x4a\x1a\x72\x26\x61\x90\xf0\xbb\x9a\x35\x68\x68\xc3\x7c\xff\x7f\x60\x3f\xae\x4c\x2e\xd5\x36\xfd\xbe\xdd\x81\x7a\x1a\xea\x58\xf1\x99\xb1\xf6\x3b\xa6\xf0\xd5\xa6\x82\x08\xd7\xdf\x1d\x3d\x23\x76\x4b\xca\x19\xc1\x79\x4f\xac\x28\x99\xc0\x6b\x69\x52\x76\x4b\x5a\x0a\xa7\x0f\x0b\xa0\x38\xb7\xfe\xb3\xe2\xbd\x64\x9f\x2e\x32\xfb\xfb\x7c\x79\xb2\xfc\xf2\xf1\xa5\x9e\xbe\xba\xcd\xe2\xf2\x43\x3e\x3d\x3d\x59\x24\x1f\x9f\x0d\xbf\x5c\x9e\x45\xce\xfd\xcd\xb8\x5d\x88\x0a\x2a\xdf\x21\x42\x22\xe3\xca\x4a\xd6\xcf\xc8\xbc\x28\xc8\x0e\x4f\x96\x67\x89\xbb\xb5\x35\xde\x66\xd4\xe5\xbf\x47\xb5\xaf\xbc\x0e\x2b\xa9\x7c\xfb\x4f\x61\x4d\x45\xbd\x71\xa7\x03\x24\x14\xcb\x84\x4e\x98\xa6\xc3\x03\x44\x48\x2b\x11\xdb\x63\x09\x57\x7b\x1d\xb4\x7d\xa0\x26\x45\x84\xef\xf7\x7d\xf0\x3e\xa6\x88\xac\xd8\xe2\x3e\x16\x7d\x14\xcd\x84\xf5\xa1\x10\xa1\xdb\xed\x63\x8e\x08\x97\x46\x71\x91\xf9\xa9\x92\xe5\x69\xce\xd4\xa9\x4c\xa8\x8f\x73\x44\xd0\x7e\x41\x22\x33\xf9\xf8\x81\xf8\x18\x11\x9c\xe3\x93\xd3\xe7\x2f\x5e\xfe\xf6\xea\xec\xf7\x3f\xce\x2f\x5e\xbf\x79\xfb\xee\xfd\xe5\xd5\x9f\x1f\x3e\x7e\xfa\xfc\x85\x4d\xe3\x84\xd2\x2c\xe7\x7f\xdd\x16\xa5\x90\xb3\xaf\x4a\x9b\xea\x6e\xbe\x58\x7e\x1b\xee\x3d\xde\x3f\x78\x72\xf8\xf4\xe8\x59\x2f\x70\x1a\xbe\x54\x2a\x97\xdb\x84\xc6\xe0\x08\x71\x78\x30\x06\xef\xf5\xbc\xda\xb7\x6a\x69\x74\x7d\xec\xdb\xb6\x7a\x6c\x5c\xee\xdd\x20\x02\x5f\x1f\x98\x86\x61\xd1\x30\x2c\x10\xe2\x7c\x8c\xc5\xcf\x04\x31\x22\xd0\xb5\x5e\x91\x2c\xbc\x9b\x87\xee\x84\x08\xee\x14\x61\x88\x43\x0f\x3d\xc4\x2b\x7b\x81\x5e\x84\xc3\xd5\x6c\x9e\xf3\x82\xdc\x02\x93\x08\x47\x5e\x6b\x5b\x71\x03\xae\xcb\x1a\x96\xc9\x64\x02\xb7\xc0\xc0\xa2\x3c\x3c\xc2\x70\x91\xa6\x1e\x7e\xfc\x80\x6b\x13\x73\xcf\x31\xc0\x63\xcf\x7a\x1e\xc1\x55\x76\x81\xb9\xcb\x3c\x6f\xb5\xc8\xfd\xc6\x3b\x29\x32\x95\x12\xa8\x9b\xe8\x7d\x53\x74\xae\x67\x05\x5b\xba\x8d\x04\x1e\x6a\xfe\x60\xde\xaa\x7c\x7d\x21\xec\x54\x93\x3e\x59\x5e\xb1\xec\x35\x2b\xc9\xed\x5a\x54\xd7\xbb\x1e\xde\xac\x2b\xcb\x4b\x96\x59\xd9\x08\x9a\xe3\xcc\x8e\xdd\x36\xbd\xda\xe1\x6b\x65\x77\xb2\xbb\xba\xc3\xb4\xac\x54\x4c\x7e\x25\x6c\x0e\x3a\xaf\xaf\x30\xc5\x44\x22\xcb\xee\x66\x94\x14\x85\x64\xc9\x96\x52\xb7\xcb\x63\x13\xf1\xeb\xee\xe1\xaf\x6f\x8b\xb3\x36\x95\x6e\xa5\x0a\xb7\x8b\xde\x46\x0a\x3d\x74\xbd\x76\x85\xfb\xe6\x51\x1f\x56\x9f\x0b\x41\xea\xd5\xd5\x85\x55\xed\xe6\x21\x71\xeb\xa6\x71\x3d\xbc\xf1\x9b\x8e\xe0\xad\x83\x2e\xb7\x82\x9c\x81\x83\x1e\x36\xd1\xb6\xc1\xd4\x45\xe8\x84\xc1\xaa\x11\x85\x41\xd3\x92\x6d\x8f\xae\xff\x30\xfc\x1d\x00\x00\xff\xff\xca\x06\xfb\x19\x48\x08\x00\x00")

func resourcesTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTemplateHtml,
		"resources/template.html",
	)
}

func resourcesTemplateHtml() (*asset, error) {
	bytes, err := resourcesTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/template.html", size: 2120, mode: os.FileMode(420), modTime: time.Unix(1518010565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/template.html": resourcesTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"template.html": &bintree{resourcesTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

