// Code generated by go-bindata.
// sources:
// resources/template.html
// DO NOT EDIT!

package quotify

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5b\x73\xdb\x36\x13\x7d\xd7\xaf\x38\x1f\x1f\x22\x72\x44\x91\xf2\x25\x8e\x23\x91\xca\xd8\x4e\xf2\xc5\xad\x9d\x9b\xdd\xdc\x1c\xb7\x03\x91\x4b\x12\x35\x49\xc8\x00\x68\x49\x49\xfc\xdf\x3b\x20\x29\x4b\xca\x68\xda\x3e\x74\x6c\x89\xc0\xee\xc1\xc1\x72\xf7\x60\xa1\xe0\x7f\xcf\xdf\x9c\x5c\x7e\x7e\xfb\x02\x99\x2e\xf2\x71\x27\x68\x1e\x9d\x20\x23\x16\x8f\x3b\x40\x50\x90\x66\xc8\xb4\x9e\xf6\xe9\xb6\xe2\x77\xa1\x75\x22\x4a\x4d\xa5\xee\x5f\x2e\xa6\x64\x21\x6a\x66\xa1\xa5\x69\xae\x7d\xb3\x7a\x84\x28\x63\x52\x91\x0e\x2b\x9d\xf4\x0f\x2d\xbf\xa6\xc9\x79\x79\x83\x4c\x52\x12\x5a\x86\x4c\x0d\x7d\x3f\x11\xa5\x56\x5e\x2a\x44\x9a\x13\x9b\x72\xe5\x45\xa2\xf0\x23\xa5\x9e\x25\xac\xe0\xf9\x22\x3c\x37\x7e\x92\x92\x69\x0b\x92\xf2\xd0\x52\x7a\x91\x93\xca\x88\xb4\x55\x73\xd6\x73\x33\x02\x26\x22\x5e\xe0\x7b\x3d\x04\x0c\x71\x5f\xf1\x6f\x34\xc4\xfe\x60\x3a\x1f\xb5\xe6\x48\xe4\x42\x0e\x31\xcb\xb8\xa6\xa5\x6d\xc2\xa2\x9b\x54\x8a\xaa\x8c\xfb\x92\xa6\xc4\xf4\x10\xa5\x68\x87\x5b\x30\x53\xa1\xb8\xe6\xa2\x1c\x22\xa2\x52\x93\xdc\x02\x69\xf6\x8d\xc4\xdd\x56\x2f\xd3\x9a\x45\x59\x41\xa5\x1e\x22\xe1\x73\x8a\x97\x18\x93\xbe\xbe\xca\x58\x2c\x66\x43\x0c\xcc\x9f\xb7\x43\x05\x64\x3a\x61\xf6\xc0\x45\xfb\xef\xed\xed\x39\x6e\xbb\xa2\x01\xed\x6e\x01\xed\xfc\x84\xd9\xff\x37\x44\x87\x5b\x40\x8f\x37\x30\xdb\xe2\x79\xb2\x09\xd9\x16\xcd\x4f\x90\x6d\xc1\x3c\x79\xec\x34\x79\xb8\x37\x65\xf5\xdb\xba\x06\x7e\x23\xc2\x4e\x60\xaa\x3b\xee\x04\x31\xbf\x43\xed\x0b\xad\x19\x8f\x75\x36\x3c\x1c\x98\xf2\xa2\x60\x32\xe5\xe5\x70\x00\x56\x69\x31\xb2\xc0\xe3\xd0\x9a\xe6\x2c\xa2\x46\x26\xd9\x4e\xa3\x91\xf5\xf5\xb5\x44\x1a\x9d\x0d\xbb\x2b\xa1\x75\x5d\x28\x56\xaa\xbe\x22\xc9\x93\x96\x29\xca\x58\x99\xd2\xbb\x4a\x68\xb2\xc6\x81\x1f\xf3\xbb\x9a\xd5\x6f\x68\x83\x6c\xef\x3f\x60\x3f\xaa\x74\x26\xe4\x26\xfd\x9e\xc9\x40\x3d\x0d\x54\x24\xf9\x54\x1b\xfb\x1d\x93\xb8\x35\xa1\x20\xc4\xd5\x77\x4b\x4d\x89\xdd\x90\xb4\x86\xb0\xde\x13\xcb\x0b\x56\xe2\xb5\xd0\x09\xbb\x21\x25\x4a\xcb\x85\x01\x50\x94\x19\xff\x69\xfe\x5e\xb0\x4f\xe7\xa9\xf9\x7c\xbe\x38\x5e\x7c\xf9\xf8\x52\x4d\x5e\xdd\xa4\x51\xf1\x21\x9b\x9c\x1c\xcf\xe3\x8f\x4f\x07\x5f\x2e\x4e\x43\xeb\xfe\x7a\xd4\x6e\x44\x39\x15\xef\x10\x22\x16\x51\x65\x24\xeb\xa5\xa4\x5f\xe4\x64\x86\xc7\x8b\xd3\xd8\xde\x48\x8d\xb3\xbe\xea\xe2\x9f\x57\xb5\xaf\xbc\x5a\x56\x50\xf1\xf6\xef\x96\x35\x15\x75\x46\x9d\x0e\x10\x53\x24\x62\x3a\x66\x8a\x0e\xf6\x11\x22\xa9\xca\xc8\x1c\x4b\xd8\xca\xe9\xa0\xed\x03\x35\x29\x42\x7c\xbf\x77\xc1\x5d\x4c\x10\x1a\xb1\x45\x2e\xe6\x2e\xf2\x66\xc2\x5c\x48\x84\xe8\x76\x5d\xcc\x10\xe2\x42\x4b\x5e\xa6\x5e\x22\x45\x71\x92\x31\x79\x22\x62\x72\x71\x86\x10\xca\xcb\xa9\x4c\x75\x36\x7a\x20\x3e\x42\x08\xeb\xe8\xf8\xe4\xf9\x8b\x97\xff\x7f\x75\xfa\xcb\xaf\x67\xe7\xaf\xdf\xbc\x7d\xf7\xfe\xe2\xf2\xb7\x0f\x1f\x3f\x7d\xfe\xc2\x26\x51\x4c\x49\x9a\xf1\x3f\x6f\xf2\xa2\x14\xd3\x5b\xa9\x74\x75\x37\x9b\x2f\xbe\x0d\x76\x76\xf7\xf6\x1f\x1f\x3c\x39\x7c\xda\xf3\xad\x86\x2f\x11\xd2\xe6\x26\xa0\x11\x38\x02\x1c\xec\x8f\xc0\x7b\x3d\xa7\xf6\x2d\x5b\x1a\x5d\x1d\x79\xa6\xad\x1e\x69\x9b\x3b\xd7\x08\xc1\x57\x07\xa6\x61\x98\x37\x0c\x73\x04\x38\x1b\x61\xfe\x33\x41\x84\x10\x74\xa5\x96\x24\x73\xe7\xfa\xa1\x3b\x21\x84\x3d\x41\x10\xe0\xc0\x41\x0f\xd1\xd2\x9e\xa3\x17\xe2\x60\x39\x9b\x65\x3c\x27\x3b\xc7\x38\xc4\xa1\xd3\xda\x96\xdc\x80\x6d\xb3\x86\x65\x3c\x1e\xc3\xce\xd1\x37\x28\x07\x8f\x30\x98\x27\x89\x83\x1f\x3f\x60\x9b\xc0\xec\x33\xf4\xb1\xeb\x18\xcf\x23\xd8\xd2\x6c\x30\xb3\x99\xe3\x2c\x37\xb9\x5f\x7b\x27\x49\xba\x92\x25\xea\x26\x7a\xdf\x14\x9d\xab\x69\xce\x16\x76\x23\x81\x87\x9a\x3f\x98\x37\x2a\x5f\x5f\x08\x5b\xd5\xa4\x8e\x17\x97\x2c\x7d\xcd\x0a\xb2\xbb\x06\xd5\x75\xae\x06\xd7\xab\xca\xf2\x82\xa5\x46\x36\x25\xcd\x70\x6a\xc6\xb6\xb3\x72\xde\x56\x86\x73\x4d\x7c\x76\x7d\x18\xaf\x06\xd7\x5e\x73\xd2\xd6\xb0\x8a\x98\x8c\xb2\x0b\x6d\x14\x76\x5b\x35\xf6\x75\xdb\xc3\xd8\x93\x54\x6b\xdb\xf6\xaf\x7e\xff\x3a\xfb\xaa\xae\x7f\xfc\xe1\xa7\x2e\x2c\xcb\x59\x79\xbe\xaa\x5e\x6d\x73\xad\x76\x87\xfa\xab\x8e\xd5\x53\xd2\x14\xb7\xbb\xbc\x56\x95\xa8\x64\x44\x5e\x55\x9a\xb4\xa8\xac\xbe\x55\x77\x76\x0f\x07\xf3\xa7\x07\x03\xff\x59\x17\xbd\xd5\xce\xa3\x35\x16\x51\xe6\x82\xc5\x1b\x87\x69\x53\x41\x26\x57\x5e\xdd\xe0\xbc\xd5\x85\x76\xda\x66\xab\x5b\xc9\xdc\x36\xdc\xab\x90\x7a\xe8\x3a\xdd\x56\xa5\xcd\xa3\xee\x27\x1e\x2f\x4b\x92\xaf\x2e\xcf\xcf\xd6\xf2\x52\xf7\x8c\x0d\x8f\xd5\xb7\xd0\xc3\x7a\x76\x4d\xa3\xab\xc5\xd0\x09\xfc\x65\x43\x0c\xfc\xe6\x6a\x30\x77\x45\xfd\xc3\xe5\xaf\x00\x00\x00\xff\xff\x3b\x52\xa9\xcc\xd0\x08\x00\x00")

func resourcesTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTemplateHtml,
		"resources/template.html",
	)
}

func resourcesTemplateHtml() (*asset, error) {
	bytes, err := resourcesTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/template.html", size: 2256, mode: os.FileMode(420), modTime: time.Unix(1520001596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/template.html": resourcesTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"template.html": &bintree{resourcesTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

