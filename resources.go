// Code generated by go-bindata.
// sources:
// resources/template.html
// DO NOT EDIT!

package quotify

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5b\x53\xdc\x38\x13\x7d\xe7\x57\x9c\xcf\x5f\x55\xc6\xae\xb9\x26\x61\xd9\xc9\xd8\x9e\x2d\x20\xc9\x86\x5d\xc8\x0d\x36\x37\x8a\x07\x8d\xdd\xb6\xb5\xd8\x92\x91\x64\xc6\x13\xc2\x7f\xdf\x92\x3d\x81\x31\x90\xec\xcb\xaa\x8a\x42\x52\xf7\xe9\x6e\x1f\xb5\x8e\x26\xf8\xdf\xf3\x37\xfb\x27\x9f\xdf\xbe\x40\x66\x8a\x7c\xbe\x15\xb4\xff\xb6\x82\x8c\x58\x3c\xdf\x02\x80\xa0\x20\xc3\x90\x19\x53\x0e\xe9\xa2\xe2\x97\xa1\xb3\x2f\x85\x21\x61\x86\x27\xab\x92\x1c\x44\xed\x2a\x74\x0c\xd5\x66\x6c\xf1\x3e\xa2\x8c\x29\x4d\x26\xac\x4c\x32\x9c\x3a\x18\xaf\x23\xe5\x5c\x9c\x23\x53\x94\x84\x8e\x8d\xa7\x67\xe3\x71\x22\x85\xd1\xa3\x54\xca\x34\x27\x56\x72\x3d\x8a\x64\x31\x8e\xb4\xfe\x2d\x61\x05\xcf\x57\xe1\x91\xb5\x93\x52\xcc\x38\x50\x94\x87\x8e\x36\xab\x9c\x74\x46\x64\x9c\x75\xd4\x66\xa7\x9d\xdb\xb1\x90\xf1\x0a\x57\x37\x4b\x3b\x6c\x92\xa1\xe6\x5f\x69\x86\xed\x49\x59\xfb\x1d\x63\x24\x73\xa9\x66\x58\x66\xdc\x50\xd7\x62\x3f\x68\xa8\x33\x16\xcb\xe5\x0c\x13\x4c\xf0\xa4\xac\xf1\xff\xe9\x74\xda\x75\x5b\xb0\xe8\x3c\x55\xb2\x12\xf1\x50\x51\x49\xcc\xcc\x20\xe4\x7a\xfa\x43\xcf\x52\x6a\x6e\xb8\x14\x33\x44\x24\x0c\xa9\x1f\x3a\xb6\x65\x47\xf2\xf2\x27\x3e\xcc\x18\x16\x65\x05\x09\x33\x43\xc2\x6b\x8a\x6f\x3d\xaf\x5b\x8e\xc6\x6b\x92\x82\x71\x7b\xb0\x5b\x81\xa5\x69\x4d\x60\xcc\x2f\xd1\xd8\x43\x67\xc9\x63\x93\xcd\xa6\x13\xcb\x12\x0a\xa6\x52\x2e\x66\x13\xb0\xca\x48\xdf\x01\x8f\x43\xa7\xcc\x59\x44\xce\x2d\xdb\x41\xf6\x78\xde\x29\x6b\x33\x5a\xc3\x7b\x7b\x90\xb3\xde\xed\x49\xf6\x06\xd0\x4c\xe8\xa1\x26\xc5\x93\x75\xdc\x28\x63\x22\xa5\x77\x95\x34\xe4\xcc\x83\x71\xcc\x2f\x37\x72\x8c\x37\x93\x04\xd9\xd3\xff\x30\xe3\x6e\x65\x32\xa9\x1e\x4a\xb9\xce\xb2\x61\x08\x74\xa4\x78\x69\x6e\xbd\x2e\x99\xc2\x85\x2d\x19\x21\x4e\xaf\xe0\xe8\x92\xd8\x39\x29\x67\x06\xe7\x3d\xb1\xbc\x60\x02\xaf\xa5\x49\xd8\x39\x69\x29\x9c\x41\xe3\x40\x51\x66\xed\x07\xf9\x7b\xc9\x3e\x1d\xa5\xf6\xef\xf3\xf1\xde\xea\xcb\xc7\x97\x7a\xf1\xea\x3c\x8d\x8a\x0f\xd9\x62\x7f\xaf\x8e\x3f\x3e\x9b\x7c\x39\x3e\x08\x1d\x5c\x9f\xf9\x9d\x84\x94\x53\xf1\x0e\x21\x62\x19\x55\xf6\xc8\x47\x29\x99\x17\x39\xd9\xe9\xde\xea\x20\x76\x3b\x54\x7a\xf7\xb1\xc7\xff\x8e\x5d\x93\x72\x17\x5c\x50\xf1\xf6\x67\xe0\xb6\x37\x3c\x7f\xeb\x06\x16\x53\x24\x63\xda\x63\x9a\x76\xb6\x11\x22\xa9\x44\x64\x9b\x1e\xae\xf6\xee\x5c\xd1\x26\x01\x42\x5c\x5d\x0f\xc0\x07\x58\x20\xc4\x64\x80\x68\x80\x7a\x80\xbc\x5d\xb0\x01\x14\x42\xf4\x7a\x03\x2c\x11\xe2\xd8\x28\x2e\xd2\x51\xa2\x64\xb1\x9f\x31\xb5\x2f\x63\x1a\xe0\x10\x21\xf4\x28\x27\x91\x9a\xcc\xbf\x97\x60\x17\x21\x9c\xdd\xbd\xfd\xe7\x2f\x5e\xfe\xfe\xea\xe0\x8f\x3f\x0f\x8f\x5e\xbf\x79\xfb\xee\xfd\xf1\xc9\x5f\x1f\x3e\x7e\xfa\xfc\x85\x2d\xa2\x98\x92\x34\xe3\x7f\x9f\xe7\x85\x90\xe5\x85\xd2\xa6\xba\x5c\xd6\xab\xaf\x93\xc7\x4f\x9e\x6e\xff\xb2\xf3\xeb\xf4\x59\x7f\xec\xf8\x77\xb4\x45\xc1\xe5\xb6\x42\x1f\x1c\x01\x76\xb6\x7d\xf0\x7e\xdf\xc3\x15\xe8\x74\x77\x64\x95\x70\xd7\xb8\xdc\x3b\x43\x08\xee\xaf\xef\x63\x07\x5c\xb7\xe0\x1a\x01\x0e\x7d\xd4\x0d\xb6\xe3\x65\x47\x84\x10\x74\xaa\xbf\xc7\xab\xbd\x33\xbf\x21\xc9\x5d\x20\x08\xb0\xe3\xa1\x8f\xc8\x47\x8e\x7e\x88\x1d\xff\x1e\x7a\x99\xf1\x9c\xe0\xe6\x98\x87\x98\xda\xd2\x5c\x97\xb5\xe0\xf9\x7c\x6e\xf7\x87\x76\xdf\xc3\x23\x4c\xea\x24\xf1\xf0\xed\x9b\x2d\x2b\x80\x7b\x88\x21\x9e\x78\xd6\xf2\x08\xae\xb2\xd1\x97\x2e\xf3\xbc\xbb\xdf\xd1\x5d\x29\x32\x95\x12\xd8\xd0\xab\xeb\xcd\x9e\xe0\xba\xcc\xd9\xca\xdd\xe8\xae\x9b\xbe\xb8\xb1\x3d\xd0\x1d\x8d\xae\x3f\xd8\x7d\x7a\x6f\x75\xc2\xd2\xd7\xac\x20\xb7\x67\xbd\x7a\xde\xe9\xe4\xec\xfe\xe9\xf3\x82\xa5\xb6\xc5\x04\x2d\x71\x60\xe7\x9b\x25\xd8\xd1\x38\x8c\xb4\xb2\x5c\xf7\xbe\x3f\x50\x5a\x56\x2a\xa2\x51\x25\x6c\x65\x3a\x6b\xde\x27\xc5\x44\x2c\x8b\xde\x43\x68\x29\x72\xc9\xe2\x4e\xaf\x3f\x74\x9c\xb6\xcc\x51\xa3\x59\xa3\x5b\x1d\x3f\x58\x17\xd8\xab\x54\xee\xf6\xd0\xdf\x28\xa8\x8f\x9e\x77\x27\xdf\x75\x77\xd9\xc8\xc2\x88\x0b\x41\xea\xd5\xc9\x91\xbd\x07\x9b\x97\xcf\x6d\x64\xea\x74\x72\x36\x6a\x25\xc8\xbb\x0f\x3e\xee\x80\x9d\xa1\x83\x3e\x36\x51\x56\xd9\x1e\x78\x57\xd6\x92\x18\x8c\xdb\x07\xc5\xbe\x30\xf6\x27\xc4\x3f\x01\x00\x00\xff\xff\x06\xe3\x76\x18\x59\x08\x00\x00")

func resourcesTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTemplateHtml,
		"resources/template.html",
	)
}

func resourcesTemplateHtml() (*asset, error) {
	bytes, err := resourcesTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/template.html", size: 2137, mode: os.FileMode(420), modTime: time.Unix(1517949669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/template.html": resourcesTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"template.html": &bintree{resourcesTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

